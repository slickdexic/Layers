/**
 * @class mw.layers
 * @singleton
 */
mw.layers = {
    /**
     * Initialize layers functionality
     */
    init: function () {
        // Initialize layer thumbnails
        this.initializeLayerThumbnails();
        
        // Initialize edit layer functionality on file pages
        this.initializeFilePageIntegration();
        
        // Listen for editor initialization from PHP hook
        var self = this;
        mw.hook( 'layers.editor.init' ).add( function( config ) {
            self.createEditor( config.filename, config.container );
        } );
        
        // Re-initialize when content changes
        mw.hook( 'wikipage.content' ).add( function () {
            self.initializeLayerThumbnails();
            self.initializeFilePageIntegration();
        } );
    },
    
    /**
     * Initialize file page edit layer functionality
     */
    initializeFilePageIntegration: function () {
        // Only on file namespace pages
        if ( mw.config.get( 'wgNamespaceNumber' ) !== 6 ) {
            return;
        }
        
        // Check if user has edit layers permission
        if ( !mw.config.get( 'wgUserGroups' ).includes( 'user' ) ) {
            return; // Basic permission check - should be more sophisticated
        }
        
        // Note: Edit Layers tab should be added via PHP hook (UIHooks::onSkinTemplateNavigation)
        // But let's check if we need JavaScript fallback
        console.log( 'Layers: File page integration initialized' );
        console.log( 'Layers: Checking for existing Edit Layers tab...' );
        
        // Check if PHP hook created the tab
        setTimeout( function() {
            var existingTab = document.querySelector( 'a[href*="action=editlayers"]' ) ||
                             document.getElementById( 'ca-editlayers' );
            
            if ( !existingTab ) {
                console.log( 'Layers: No PHP-created tab found, adding JavaScript fallback' );
                mw.layers.addEditLayersTab();
            } else {
                console.log( 'Layers: PHP-created tab found, no JavaScript fallback needed' );
            }
        }, 100 );
    },
        
        // Initialize edit layer functionality on file pages
        this.initializeFilePageIntegration();
        
        // Listen for editor initialization from PHP hook
        var self = this;
        mw.hook( 'layers.editor.init' ).add( function( config ) {
            self.createEditor( config.filename, config.container );
        } );
        
        // Re-initialize when content changes
        mw.hook( 'wikipage.content' ).add( function () {
            self.initializeLayerThumbnails();
            self.initializeFilePageIntegration();
        } );
    },
    
    /**
     * Initialize file page edit layer functionality
     */
    initializeFilePageIntegration: function () {
        // Only on file namespace pages
        if ( mw.config.get( 'wgNamespaceNumber' ) !== 6 ) {
            return;
        }
        
        // Check if user has edit layers permission
        if ( !mw.config.get( 'wgUserGroups' ).includes( 'user' ) ) {
            return; // Basic permission check - should be more sophisticated
        }
        
        // Add "Edit Layers" tab to file pages
        // This provides fallback if PHP hooks are not working
        this.addEditLayersTab();
        
        console.log( 'Layers: File page integration initialized with JavaScript tab fallback' );
    },
    
    /**
     * Add Edit Layers tab to file page
     */
    addEditLayersTab: function () {
        var self = this;
        
        // Check if tab already exists to prevent duplicates
        if ( document.getElementById( 'ca-editlayers' ) ) {
            console.log( 'Layers: Edit Layers tab already exists, skipping creation' );
            return;
        }
        
        // Find the views section where tabs are located
        var views = document.querySelector( '#p-views ul' ) || 
                   document.querySelector( '.vector-menu-content-list' ) ||
                   document.querySelector( '#ca-nstab-file' ).parentNode;
        
        if ( !views ) {
            console.warn( 'Layers: Could not find views section to add tab' );
            return;
        }
        
        // Create Edit Layers tab
        var editLayersTab = document.createElement( 'li' );
        editLayersTab.id = 'ca-editlayers';
        editLayersTab.className = 'collapsible';
        
        var link = document.createElement( 'a' );
        link.href = '#';
        link.textContent = 'Edit Layers';
        link.title = 'Edit image layers and annotations';
        
        editLayersTab.appendChild( link );
        views.appendChild( editLayersTab );
        
        // Add click handler
        link.addEventListener( 'click', function ( e ) {
            e.preventDefault();
            self.launchEditor();
        } );
        
        console.log( 'Layers: Added Edit Layers tab to file page' );
    },
    
    /**
     * Launch the layers editor
     */
    launchEditor: function () {
        var self = this;
        
        // Get current file name
        var filename = mw.config.get( 'wgTitle' );
        if ( !filename ) {
            mw.notify( 'Could not determine file name', { type: 'error' } );
            return;
        }
        
        // Load editor resources if not already loaded
        if ( typeof window.LayersEditor === 'undefined' ) {
            mw.loader.using( 'ext.layers.editor' ).then( function () {
                self.createEditor( filename );
            } ).catch( function ( err ) {
                console.error( 'Failed to load layers editor:', err );
                mw.notify( 'Failed to load layers editor', { type: 'error' } );
            } );
        } else {
            this.createEditor( filename );
        }
    },
    
    /**
     * Create and launch the editor
     * @param {string} filename The file to edit
     * @param {Element} container Optional container element for the editor
     */
    createEditor: function ( filename, container ) {
        console.log( 'Layers: Launching editor for file:', filename );
        
        // Create editor instance
        var editorConfig = {
            filename: filename
        };
        
        // If container is provided, use it
        if ( container ) {
            editorConfig.container = container;
        }
        
        var editor = new window.LayersEditor( editorConfig );
        
        // Store reference for cleanup
        this.activeEditor = editor;
        
        mw.notify( 'Layers editor loaded. You can now draw on the image!', { type: 'success' } );
    },
    
    /**
     * Initialize layer viewers on thumbnails
     */
    initializeLayerThumbnails: function () {
        var thumbnails = document.querySelectorAll( '.layers-thumbnail[data-layer-data]' );
        
        thumbnails.forEach( function ( thumbnail ) {
            // Skip if already initialized
            if ( thumbnail.layersViewer ) {
                return;
            }
            
            try {
                var layerData = JSON.parse( thumbnail.getAttribute( 'data-layer-data' ) );
                if ( layerData && layerData.layers ) {
                    // Create overlay canvas for this thumbnail
                    var canvas = document.createElement( 'canvas' );
                    canvas.className = 'layers-overlay';
                    canvas.style.position = 'absolute';
                    canvas.style.top = '0';
                    canvas.style.left = '0';
                    canvas.style.pointerEvents = 'none';
                    
                    // Make thumbnail container relative for overlay positioning
                    var container = thumbnail.parentNode;
                    container.style.position = 'relative';
                    container.appendChild( canvas );
                    
                    // Create viewer
                    var viewer = new window.LayersViewer( {
                        canvas: canvas,
                        baseImage: thumbnail,
                        layers: layerData.layers,
                        readonly: true
                    } );
                    
                    thumbnail.layersViewer = viewer;
                }
            } catch ( e ) {
                if ( window.console && console.warn ) {
                    console.warn( 'Layers: Failed to initialize thumbnail viewer:', e );
                }
            }
        } );
    },
    
    /**
     * Create a new layers viewer
     * @param {Object} config Configuration object
     * @return {LayersViewer} New viewer instance
     */
    createViewer: function ( config ) {
        return new window.LayersViewer( config );
    }
};

// Auto-initialize when DOM is ready
if ( document.readyState === 'loading' ) {
    document.addEventListener( 'DOMContentLoaded', function () {
        mw.layers.init();
    } );
} else {
    mw.layers.init();
}
